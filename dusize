#!/bin/bash

# dusize - Ordered listing of disk usage
# (c) 2006-2012 Alex Malinovich (alex@malinovich.name)
# Released under the GPL v2 or later
# See www.fsf.org for a full copy of the GPL.

# prefer gnu utils on OSX if available
DUCMD=`which gdu || which du`
SORTCMD=`which gsort || which sort`

DUOPTS="-xb"
SORTOPTS="-g"
FORCE_AWK=false
DEBUG=false

x=1 # Avoids an error if we get no options at all.
while getopts "ard" opt; do
  case "$opt" in
    a) FORCE_AWK=true;;
    r) SORTOPTS="${SORTOPTS}r";;
    d) DEBUG=true;;
  esac
  x=$OPTIND
done
shift $(($x-1))

if "$SORTCMD" -h < /dev/null 2> /dev/null && ! $FORCE_AWK; then
	SORTOPTS="${SORTOPTS/#-g/-h}"
	DUOPTS="${DUOPTS}h"
fi

for i; do
	if [ ! -z "$i" ] && [ -d "$i" ]; then
		SEARCHDIR+=("$i")
	fi
	shift
done

if [ -z "${SEARCHDIR[*]}" ]; then
	SEARCHDIR=("./")
fi

if $DEBUG; then
	echo "$DUCMD $DUOPTS --max-depth=1 ${SEARCHDIR[@]} | $SORTCMD $SORTOPTS"
fi

"$DUCMD" $DUOPTS --max-depth=1 "${SEARCHDIR[@]}" | "$SORTCMD" $SORTOPTS | if [[ "$SORTOPTS" == *"-h"* ]]; then cat -; else
	gawk '{
	size=$1
	count=0

	while (size > 1023) {
		count++
		size=size/1024
	}

	if (count==4)
		suff="TB"
	else if (count==3)
		suff="GB"
	else if (count==2)
		suff="MB"
	else if (count==1)
		suff="KB"
	else
		suff="B"

	printf("%6.1f %s\t", size, suff)

	for (i=2; i <= NF; i++)
		printf("%s ", $i)
	print ""
}'
fi
